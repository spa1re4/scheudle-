package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

public class MyBot extends TelegramLongPollingBot {
    private static final Set<Long> ADMIN_IDS = Set.of(
            1237259277L,
            778224810L
    );

    private Map<Long, String> userStates = new HashMap<>();
    private Map<Long, String> tempPasswords = new HashMap<>();
    private Map<Long, String> tempGroups = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "ScheduleComBot";
    }

    @Override
    public String getBotToken() {
        return "7739118437:AAFaeMz-85h3X324yN6PR-br7MxKNMc4HQY";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) return;

        Message msg = update.getMessage();
        long chatId = msg.getChatId();
        String text = msg.getText().trim();
        String state = userStates.getOrDefault(chatId, "");

        System.out.println("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + chatId + ": " + text + " [state: " + state + "]");

        if (text.equals("‚õî –°—Ç–æ–ø")) {
            userStates.put(chatId, "");
            sendText(chatId, "‚ùå –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω.");
            sendMainMenu(chatId);
            return;
        }

        if (text.equals("/start")) {
            sendMainMenu(chatId);
            userStates.put(chatId, "");
        }

        else if (text.equals("/update_schedule") && ADMIN_IDS.contains(chatId)) {
            sendText(chatId, "üóì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥—Ä—É–ø–ø–∞-–¥–µ–Ω—å:—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: comfci-23-–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞");
            userStates.put(chatId, "WAITING_SCHEDULE_UPDATE");
        }

        else if (state.equals("WAITING_SCHEDULE_UPDATE") && ADMIN_IDS.contains(chatId)) {
            String[] parts = text.split(":", 2);
            if (parts.length != 2) {
                sendText(chatId, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: comfci-23-–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞");
                userStates.put(chatId, "");
                return;
            }

            String groupAndDay = parts[0].trim();
            String scheduleText = parts[1].trim();

            int lastDashIndex = groupAndDay.lastIndexOf("-");
            if (lastDashIndex == -1) {
                sendText(chatId, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: comfci-23-–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞");
                userStates.put(chatId, "");
                return;
            }

            String group = groupAndDay.substring(0, lastDashIndex).trim();
            String day = groupAndDay.substring(lastDashIndex + 1).trim();

            System.out.println("‚û°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + group + " " + day + " -> " + scheduleText);

            boolean success = ScheduleDao.updateSchedule(group, day, scheduleText, this);
            if (success) {
                sendText(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è *" + group + "*, –¥–µ–Ω—å *" + day + "*.");
            } else {
                sendText(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.");
            }

            userStates.put(chatId, "");
        }

        else if (text.equals("/send_message") && ADMIN_IDS.contains(chatId)) {
            sendText(chatId, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:");
            userStates.put(chatId, "WAITING_BROADCAST_TEXT");
        }

        else if (state.equals("WAITING_BROADCAST_TEXT") && ADMIN_IDS.contains(chatId)) {
            List<Long> allUsers = UserDao.getAllUserChatIds();
            for (Long userId : allUsers) {
                sendText(userId, "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n" + text);
            }
            sendText(chatId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º.");
            userStates.put(chatId, "");
        }

        else if (text.equals("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")) {
            sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
            userStates.put(chatId, "REG_PASSWORD");
        }

        else if (state.equals("REG_PASSWORD")) {
            tempPasswords.put(chatId, text);
            sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, comfci-23):");
            userStates.put(chatId, "REG_GROUP");
        }

        else if (state.equals("REG_GROUP")) {
            tempGroups.put(chatId, text);
            boolean success = UserDao.registerUser(chatId, tempPasswords.get(chatId), text);
            if (success) {
                sendText(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
            } else {
                sendText(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
            }
            userStates.put(chatId, "");
        }

        else if (text.equals("–í—Ö–æ–¥")) {
            sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
            userStates.put(chatId, "LOGIN_PASSWORD");
        }

        else if (state.equals("LOGIN_PASSWORD")) {
            boolean valid = UserDao.validateUser(chatId, text);
            if (valid) {
                sendText(chatId, "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
                showDaysKeyboard(chatId);
                userStates.put(chatId, "LOGGED_IN");
            } else {
                sendText(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                userStates.put(chatId, "");
            }
        }

        else if (state.equals("LOGGED_IN") && isWeekday(text)) {
            String group = UserDao.getUserGroup(chatId);
            if (group != null) {
                String schedule = ScheduleDao.getSchedule(group, text);
                sendText(chatId, schedule);
            } else {
                sendText(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É.");
            }
        }

        else {
            sendText(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start");
        }
    }

    private void sendMainMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"));
        row1.add(new KeyboardButton("–í—Ö–æ–¥"));
        rows.add(row1);

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showDaysKeyboard(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚õî –°—Ç–æ–ø –¥–ª—è –≤—ã—Ö–æ–¥–∞:");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        rows.add(new KeyboardRow(List.of(
                new KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
                new KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
        )));
        rows.add(new KeyboardRow(List.of(
                new KeyboardButton("–°—Ä–µ–¥–∞"),
                new KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
        )));
        rows.add(new KeyboardRow(List.of(
                new KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
        )));
        rows.add(new KeyboardRow(List.of(
                new KeyboardButton("‚õî –°—Ç–æ–ø")
        )));

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendText(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean isWeekday(String text) {
        return List.of("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞").contains(text);
    }

    @Override
    public void onRegister() {
        List<BotCommand> commandList = List.of(
                new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                new BotCommand("/update_schedule", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∞–¥–º–∏–Ω)"),
                new BotCommand("/send_message", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–¥–º–∏–Ω)")
        );

        SetMyCommands setMyCommands = new SetMyCommands();
        setMyCommands.setCommands(commandList);
        setMyCommands.setScope(new BotCommandScopeDefault());
        setMyCommands.setLanguageCode("ru");

        try {
            this.execute(setMyCommands);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
